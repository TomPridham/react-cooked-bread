{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["ExampleReactNode","phrase","getRandomShortPhrase","my","onClick","console","log","getContent","Math","random","getRandomPhrase","rootOptions","key","name","props","toastRoot","SlideShrinkToastRoot","FadeToastRoot","contentOptions","toastContent","GlossyToastContent","ClassicToastContent","BootstrapToastContent","getOptions","selectedKey","options","filter","IndexPage","useState","toastRootProps","setToastRootProps","toastContentProps","setToastContentProps","title","href","newWindowProps","alignItems","mb","mr","htmlFor","id","onChange","ev","currentTarget","value","css","fontSize","map","providerProps"],"mappings":"gzBAiBA,IAAMA,EAAmB,WACvB,IAAMC,EAASC,cACf,OACE,kBAAC,MAAD,CAAKC,GAAI,GACP,4BACEC,QAAS,WACPC,QAAQC,IAAIL,KAGbA,KAMHM,EAAa,kBAAOC,KAAKC,SAAW,GAAM,kBAACT,EAAD,MAAuBU,eAEjEC,EAAc,CAClB,CACEC,IAAK,eACLC,KAAM,eACNC,MAAO,CACLC,UAAWC,MAGf,CACEJ,IAAK,OACLC,KAAM,OACNC,MAAO,CACLC,UAAWE,OAKXC,EAAiB,CACrB,CACEN,IAAK,SACLC,KAAM,SACNC,MAAO,CACLK,aAAcC,MAGlB,CACER,IAAK,UACLC,KAAM,UACNC,MAAO,CACLK,aAAcE,MAGlB,CACET,IAAK,YACLC,KAAM,YACNC,MAAO,CACLK,aAAcG,OAKdC,EAAa,SAA4BC,EAAqBC,GAAjD,OACjBA,EAAQC,QAAO,qBAAGd,MAAkBY,KAAa,IAwEpCG,UAtEG,WAAM,MACsBC,mBAASjB,EAAY,GAAGG,OAA7De,EADe,KACCC,EADD,OAE4BF,mBAASV,EAAe,GAAGJ,OAAtEiB,EAFe,KAEIC,EAFJ,KAItB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,SACZ,kBAAC,IAAD,KACE,kIAEwB,IACtB,qCACEC,KAAK,iEACDC,KAFN,UAQJ,oCACA,kBAAC,MAAD,CAAKhC,GAAI,GACP,kBAAC,OAAD,CAAMiC,WAAW,SAASC,GAAI,GAC5B,kBAAC,MAAD,CAAKC,GAAI,GACP,kBAAC,MAAD,CAAKD,GAAI,GACP,2BAAOE,QAAQ,qBAAf,gBAEF,4BACEC,GAAG,oBACHC,SAAU,SAACC,GACTZ,EAAkBP,EAAWmB,EAAGC,cAAcC,MAAOjC,GAAaG,QAEpE+B,IAAK,CACHC,SAAU,KAGXnC,EAAYoC,KAAI,gBAAGnC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAR,OACf,4BAAQD,IAAKA,EAAKgC,MAAOhC,GACtBC,QAMT,kBAAC,MAAD,KACE,kBAAC,MAAD,CAAKwB,GAAI,GACP,2BAAOE,QAAQ,wBAAf,mBAEF,4BACEC,GAAG,uBACHC,SAAU,SAACC,GACTV,EAAqBT,EAAWmB,EAAGC,cAAcC,MAAO1B,GAAgBJ,QAE1E+B,IAAK,CACHC,SAAU,KAGX5B,EAAe6B,KAAI,gBAAGnC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,KAAR,OAClB,4BAAQD,IAAKA,EAAKgC,MAAOhC,GACtBC,SAMX,kBAAC,IAAD,CAAMN,WAAYA,EAAYyC,cAAa,OAAOnB,GAAmBE","file":"component---src-pages-index-tsx-c8a640ef4730171a5fc3.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  SlideShrinkToastRoot,\n  FadeToastRoot,\n  GlossyToastContent,\n  BootstrapToastContent,\n  ClassicToastContent,\n} from 'react-cooked-bread'\n\nimport { Layout } from 'components/layout'\nimport { Head } from 'components/head'\nimport { Demo } from 'components/demo'\nimport { Box, Flex } from 'reflexbox'\nimport { newWindowProps } from 'utils/window'\nimport { Note } from 'components/note'\nimport { getRandomPhrase, getRandomShortPhrase } from 'utils/content'\n\nconst ExampleReactNode = () => {\n  const phrase = getRandomShortPhrase()\n  return (\n    <Box my={1}>\n      <button\n        onClick={() => {\n          console.log(phrase)\n        }}\n      >\n        {phrase}\n      </button>\n    </Box>\n  )\n}\n\nconst getContent = () => (Math.random() > 0.8 ? <ExampleReactNode /> : getRandomPhrase())\n\nconst rootOptions = [\n  {\n    key: 'slide-shrink',\n    name: 'Slide shrink',\n    props: {\n      toastRoot: SlideShrinkToastRoot,\n    },\n  },\n  {\n    key: 'fade',\n    name: 'Fade',\n    props: {\n      toastRoot: FadeToastRoot,\n    },\n  },\n]\n\nconst contentOptions = [\n  {\n    key: 'glossy',\n    name: 'Glossy',\n    props: {\n      toastContent: GlossyToastContent,\n    },\n  },\n  {\n    key: 'classic',\n    name: 'Classic',\n    props: {\n      toastContent: ClassicToastContent,\n    },\n  },\n  {\n    key: 'bootstrap',\n    name: 'Bootstrap',\n    props: {\n      toastContent: BootstrapToastContent,\n    },\n  },\n]\n\nconst getOptions = <T extends { key: string }>(selectedKey: string, options: T[]) =>\n  options.filter(({ key }) => key === selectedKey)[0]\n\nconst IndexPage = () => {\n  const [toastRootProps, setToastRootProps] = useState(rootOptions[0].props)\n  const [toastContentProps, setToastContentProps] = useState(contentOptions[0].props)\n\n  return (\n    <Layout>\n      <Head title=\"Docs\" />\n      <Note>\n        <p>\n          I f*ing love toast, what absolute genius took a bite of bread and was like &quot;cook it\n          again&quot;, unreal -{' '}\n          <a\n            href=\"https://twitter.com/LoserCrew/status/1039294149667770368?s=20\"\n            {...newWindowProps}\n          >\n            Josh\n          </a>\n        </p>\n      </Note>\n      <h1>Demo</h1>\n      <Box my={4}>\n        <Flex alignItems=\"center\" mb={4}>\n          <Box mr={3}>\n            <Box mb={2}>\n              <label htmlFor=\"toast-root-select\">Root style:</label>\n            </Box>\n            <select\n              id=\"toast-root-select\"\n              onChange={(ev) => {\n                setToastRootProps(getOptions(ev.currentTarget.value, rootOptions).props)\n              }}\n              css={{\n                fontSize: 18,\n              }}\n            >\n              {rootOptions.map(({ key, name }) => (\n                <option key={key} value={key}>\n                  {name}\n                </option>\n              ))}\n            </select>\n          </Box>\n\n          <Box>\n            <Box mb={2}>\n              <label htmlFor=\"toast-content-select\">Content style:</label>\n            </Box>\n            <select\n              id=\"toast-content-select\"\n              onChange={(ev) => {\n                setToastContentProps(getOptions(ev.currentTarget.value, contentOptions).props)\n              }}\n              css={{\n                fontSize: 18,\n              }}\n            >\n              {contentOptions.map(({ key, name }) => (\n                <option key={key} value={key}>\n                  {name}\n                </option>\n              ))}\n            </select>\n          </Box>\n        </Flex>\n        <Demo getContent={getContent} providerProps={{ ...toastRootProps, ...toastContentProps }} />\n      </Box>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"sourceRoot":""}